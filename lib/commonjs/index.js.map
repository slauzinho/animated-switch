{"version":3,"sources":["index.tsx"],"names":["DEFAULT_TRANSITION","AnimatedSwitchView","containerRef","React","createRef","prevProps","prevState","navigation","state","prevActiveKey","routes","index","key","props","activeKey","current","animateNextTransition","navigationConfig","screenProps","descriptor","descriptors","ChildComponent","getComponent","transition","transitionViewStyle","params","styles","container","Component","createAnimatedSwitchNavigator","routeConfigMap","switchConfig","router","Navigator","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, ViewStyle } from 'react-native';\nimport {\n  createNavigator,\n  CreateNavigatorConfig,\n  NavigationDescriptor,\n  NavigationParams,\n  NavigationProp,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  NavigationScreenProp,\n  NavigationState,\n  NavigationSwitchProp,\n  NavigationSwitchRouterConfig,\n  SceneView,\n  SwitchRouter,\n  SupportedThemes,\n  NavigationScreenConfig,\n} from 'react-navigation';\nimport {\n  TransitioningView,\n  Transitioning,\n  Transition,\n} from 'react-native-reanimated';\n\nconst DEFAULT_TRANSITION = (\n  <Transition.Together>\n    <Transition.Out type=\"fade\" durationMs={200} interpolation=\"easeIn\" />\n    <Transition.In type=\"fade\" durationMs={200} />\n  </Transition.Together>\n);\n\ntype Props = {\n  navigationConfig: NavigationAnimatedSwitchConfig;\n  navigation: NavigationProp<NavigationState>;\n  descriptors: {\n    [key: string]: NavigationDescriptor<\n      NavigationParams,\n      NavigationAnimatedSwitchOptions,\n      NavigationSwitchProp<NavigationRoute, any>\n    >;\n  };\n  screenProps?: unknown;\n};\n\nclass AnimatedSwitchView extends React.Component<Props> {\n  componentDidUpdate(prevProps: Props) {\n    const { state: prevState } = prevProps.navigation;\n    const prevActiveKey = prevState.routes[prevState.index].key;\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n\n    if (activeKey !== prevActiveKey && this.containerRef.current) {\n      this.containerRef.current.animateNextTransition();\n    }\n  }\n\n  private containerRef = React.createRef<TransitioningView>();\n\n  render() {\n    const { navigationConfig, screenProps } = this.props;\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n    const ChildComponent = descriptor.getComponent();\n\n    let transition =\n      (navigationConfig && navigationConfig.transition) || DEFAULT_TRANSITION;\n    const transitionViewStyle =\n      (navigationConfig && navigationConfig.transitionViewStyle) || null;\n\n    if (state.params?.[state.index].key === 'Loading') {\n      return (\n        <Transitioning.View\n          ref={this.containerRef}\n          transition={DEFAULT_TRANSITION}\n          style={[styles.container, transitionViewStyle]}\n        >\n          <SceneView\n            component={ChildComponent}\n            navigation={descriptor.navigation}\n            screenProps={screenProps}\n          />\n        </Transitioning.View>\n      );\n    }\n\n    return (\n      <Transitioning.View\n        ref={this.containerRef}\n        transition={transition}\n        style={[styles.container, transitionViewStyle]}\n      >\n        <SceneView\n          component={ChildComponent}\n          navigation={descriptor.navigation}\n          screenProps={screenProps}\n        />\n      </Transitioning.View>\n    );\n  }\n}\n\nexport type NavigationAnimatedSwitchConfig = NavigationSwitchRouterConfig & {\n  transition?: React.ReactNode;\n  transitionViewStyle?: ViewStyle;\n  secondaryTransition?: React.ReactNode;\n};\n\nexport type NavigationAnimatedSwitchOptions = {};\n\nexport type NavigationAnimatedSwitchProp<\n  State = NavigationRoute,\n  Params = NavigationParams\n> = NavigationScreenProp<State, Params> & {\n  jumpTo: (routeName: string, key?: string) => void;\n};\n\nexport type NavigationAnimatedSwitchScreenProps<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = {\n  theme: SupportedThemes;\n  navigation: NavigationAnimatedSwitchProp<NavigationRoute, Params>;\n  screenProps: ScreenProps;\n};\n\nexport type NavigationAnimatedSwitchScreenComponent<\n  Params = NavigationParams,\n  ScreenProps = unknown\n> = React.ComponentType<\n  NavigationAnimatedSwitchScreenProps<Params, ScreenProps>\n> & {\n  navigationOptions?: NavigationScreenConfig<\n    NavigationAnimatedSwitchOptions,\n    NavigationAnimatedSwitchProp<NavigationRoute, Params>,\n    ScreenProps\n  >;\n};\n\nexport default function createAnimatedSwitchNavigator(\n  routeConfigMap: NavigationRouteConfigMap<{}, NavigationAnimatedSwitchProp>,\n  switchConfig: CreateNavigatorConfig<\n    NavigationAnimatedSwitchConfig,\n    NavigationSwitchRouterConfig,\n    NavigationAnimatedSwitchOptions,\n    NavigationAnimatedSwitchProp<NavigationRoute, any>\n  > = {}\n) {\n  const router = SwitchRouter(routeConfigMap, switchConfig);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  const Navigator = createNavigator(AnimatedSwitchView, router, switchConfig);\n\n  return Navigator;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}